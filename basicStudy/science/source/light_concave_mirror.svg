<?xml version="1.0" encoding="utf-8"?>
<svg id="concave-mirror" viewBox="0 0 1000 500" xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" style="cursor:none">
  <clipPath id="total-size">
    <rect width="1000" height="500" />
  </clipPath>
  <defs>
    <marker id="marker01" markerWidth="7" markerHeight="6" viewBox="-6 -3 6 6" orient="auto">
      <path d="M-6-2L0 0-6 2" style="stroke:#000; fill:none" />
    </marker>
    <marker id="marker02" markerWidth="7" markerHeight="6" viewBox="-6 -3 6 6" orient="auto">
      <path d="M-6-2L0 0-6 2" style="stroke:#866; fill:none" />
    </marker>
  </defs>
  <path
    d
    style="fill:none; stroke:#eef; stroke-width:0.5" />
  <path d="M0 250H1000" style="fill:none; stroke:black;" />

  <!-- 오목거울: 
  초점 : 160 => (1/640)x^2 
  포물선 높이: 97.656 -->
  <path d="M510 500V0h-107.656q195.312 250 0 500z" style="fill:#eee7; stroke:#bbb" />

  <!-- 커서 -->
  <g style="stroke-width:3">
    <path id="guideTop" d="M100 100H465L132 500 " style="fill:none; stroke:#fdd" />
    <path id="guideTop2" d="M465 100L548 0 " style="fill:none; stroke:#fdd; stroke-dasharray:5 2;" />
    <path id="guideDown" d="M100 100L500 250 -167 500 " style="fill:none; stroke:#ddf" />
    <path id="guideDown2" d="M500 250L1167 0 " style="fill:none; stroke:#ddf; stroke-dasharray:5 2;" />
  </g>
  <g style="stroke-width:3">
    <path id="origin" d="M100 250V100" marker-end="url(#marker01)" style="fill:none; stroke:#000;" />
    <path id="ret" d="M267 250V337 " marker-end="url(#marker02)" style="fill:none; stroke:#866;" />
  </g>

  <!-- 초점 -->
  <ellipse cx="340" cy="250" rx="2" ry="2" style="fill:#000" />
  <ellipse cx="500" cy="250" rx="2" ry="2" style="fill:#000" />

  <text id="pA" x="470" y="105">A(35,150)</text>
  <text id="pS" x="100" y="90" style="text-anchor:middle">(400, 150)</text>
  <text id="pD" x="267" y="245" style="text-anchor:middle">x0.58</text>
  <text x="500" y="265">O(0, 0)</text>
  <text x="340" y="265">f(0, 160)</text>

  <script>
    var svg = document.getElementById("concave-mirror");

    svg.addEventListener("mousemove", (e) => {
      x = Math.round(e.clientX - svg.getClientRects()[0].x);
      y = Math.round(e.clientY - svg.getClientRects()[0].y);
      if(y==250)
        return;

      document.getElementById('origin').setAttribute('d', `M${x} 250V${y}`);
      var pAx = 500 - (y - 250)*(y - 250)/640;

      // Top가이드라인 그리기
      TopToX = (340 - pAx) * ((500 - y) / (250 - y));
      document.getElementById('guideTop').setAttribute('d', `M${x} ${y}H${pAx}l${TopToX} ${500 - y}`);
      TopToX2 = (340 - pAx) * (y / (y - 250)) + pAx;
      document.getElementById('guideTop2').setAttribute('d', `M${pAx} ${y}L${TopToX2} 0`);

      // down가이드라인 그리기
      DownToX = (x - 500) * (250 / (250 - y)) + 500;
      document.getElementById('guideDown').setAttribute('d', `M${x} ${y}L500 250 ${DownToX} 500`);
      DownToX2 = -(x - 500) * (250 / (250 - y)) + 500;
      document.getElementById('guideDown2').setAttribute('d', `M500 250L${DownToX2} 0`);

      // 상(결과) 그리기
      retXY = findIntersection(pAx, y, pAx + TopToX, 500, 500, 250, DownToX, 500);
      var retD = ""
      if(0>retXY.x)
        retD = `M50 ${(retXY.y>250)?270:230}H20`;
      else if(retXY.x>1000)
        retD = `M950 ${(retXY.y>250)?270:230}H980`;
      else
        retD = `M${retXY.x} 250V${retXY.y}`;

      document.getElementById('ret').setAttribute('d', retD);

      pS = document.getElementById('pS');
      pS.setAttribute('x', x);
      pS.setAttribute('y', (y>250)?y+12:y-5);
      pSi = {x: 500-x, y: 250-y, text: `S(${500-x},${250-y})`}
      pS.textContent = pSi.text;

      pD = document.getElementById('pD');
      pD.setAttribute('x', (retXY.x>30)?(retXY.x>970?970:retXY.x):30);
      pD.setAttribute('y', (retXY.y>250)?245:265);
      pDi = {x: 500 - retXY.x.toFixed(0), y: 250 - retXY.y.toFixed(0), text: `x${Math.abs(((250 - retXY.y) / (y - 250)).toFixed(2))}`}
      pD.textContent = pDi.text;

      pA = document.getElementById('pA');
      pA.setAttribute('x', pAx + 5);
      pA.setAttribute('y', y + 5);
      pAi = {x: 500 - pAx.toFixed(0), y: 250 - y.toFixed(0), text:`A(${(500-pAx).toFixed(0)},${250-y})`};
      pA.textContent = pAi.text;

      console.log(`S:${pSi.x}, ${pSi.y}: A:${pAi.x},${pAi.y}, D:${pDi.x},${pDi.y}`);
    });

    function findIntersection(a_x, a_y, b_x, b_y, c_x, c_y, d_x, d_y) {
      // 첫 번째 직선의 기울기를 계산합니다.
      var slope1 = (b_y - a_y) / (b_x - a_x);
      // 두 번째 직선의 기울기를 계산합니다.
      var slope2 = (d_y - c_y) / (d_x - c_x);

      // 두 직선이 평행인 경우, 교차 지점은 존재하지 않습니다.
      if (slope1 === slope2) {
        return null;
      }

      // 두 직선의 교차점의 x 좌표를 계산합니다.
      var x = ((c_y - a_y) + (slope1 * a_x) - (slope2 * c_x)) / (slope1 - slope2);
      // 교차점의 y 좌표를 계산합니다.
      var y = slope1 * (x - a_x) + a_y;

      return { x: x, y: y };
    }
  </script>
</svg>